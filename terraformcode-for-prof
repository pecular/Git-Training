Hello Prof!.
# # hope you are doing well, this Terraform code is^_ for training. please be carefull about the names, you can name your own way or follow along the teacher.


# provider "aws" {
#   region = "us-east-1"
#   access_key = "AKIAXG3KQXKUZUVP4RPU"
#   secret_key = "MaDdUFQ7Vi43Waals8XP8CNmKCeabpILWCYtSgAH"
# }

# resource "aws_instance" "my-first-server" {
#   ami           =     "ami-052efd3df9dad4825"
#   instance_type = "t2.micro"
# #    tags = {
# #     Name = "ubuntu"
# #    }
# }

# #||.Project

# # #1.create vpc
# # resource "aws_vpc" "test1_vpc" {
# #   cidr_block = "10.0.0.0/16"
# # }
# # #2.create internet gateway
# # resource "aws_internet_gateway" "gw" {
# #   vpc_id = aws_vpc.test1_vpc.id

# #   tags = {
# #     Name = "v_test1"
# #   }
# # }
# # #3.create custum rule table
# # resource "aws_route_table" "test1_route_table" {
# #   vpc_id = aws_vpc.test1_vpc.id

# #   route {
# #     cidr_block = "0.0.0.0/0"
# #     gateway_id = aws_internet_gateway.gw.id
# #   }

# #   route {
# #     ipv6_cidr_block        = "::/0"
# #     egress_only_gateway_id = aws_internet_gateway.gw.id
# #   }
# #   tags = {
# #     Name = "prod_test1"
# #   }
# # }
# #4 create a subnet
# # resource "aws_subnet" "subnet-test1" {
# #   vpc_id     = aws_vpc.test1_vpc.id
# #   cidr_block = "10.0.1.0/24"
# #   availability_zone = "us-east-1a"
# #   tags = {
# #     Name = "test1-subnet"
# #   }
# #  }
# 4. create a subnet
# resource "aws_subnet" "subnet-test1" {
#   vpc_id     = aws_vpc.test1_vpc.id
#   cidr_block = "10.0.1.0/24"
#   availability_zone = "us-east-1a"
#   tags = {
#     Name = "test1-subnet"
#   }
# }


# #5.associate subnet with a route table
# resource "aws_route_table" "test1_route_table" " "a" {
#   subnet_id      = aws_subnet.subnet-test1.id
#   route_table_id = aws_route_table.test1_route_table.id

#   }to_port          = 443
#     protocol         = "tcp"
#     cidr_blocks      = ["0.0.0.0/0"]

#   }

#   ingress {
#     description      = "HTTP"
#     from_port        = 80
#     to_port          = 80
#     protocol         = "tcp"
#     cidr_blocks      = ["0.0.0.0/0"]
#   }

#   ingress {
#     description      = "SSH"
#     from_port        = 22
#     to_port          = 22
#     protocol         = "tcp"
#     cidr_blocks      = ["0.0.0.0/0"]
#   }

#   egress {
#     from_port        = 0
#     to_port          = 0
#     protocol         = "-1"
#     cidr_blocks      = ["0.0.0.0/0"]
#     ipv6_cidr_blocks = ["::/0"]
#   }

#   tags = {
#     Name = "allow_web"
#   }
# }

# -- INSERT --                                                                                                                                                                             81,16         67%


# #6.create security group to allow port 22,80,443
# resource "aws_security_group" "allow_web" {
#   name        = "allow_web_trafic"
#   description = "allow web inbound tarfic"
#   vpc_id      = aws_vpc.test1_vpc.id

#   ingress {
#     description      = "HTTPS"
#     from_port        = 443
# to_port          = 443
#     protocol         = "tcp"
#     cidr_blocks      = ["0.0.0.0/0"]

#   }

#   ingress {
#     description      = "HTTP"
#     from_port        = 80
#     to_port          = 80
#     protocol         = "tcp"
#     cidr_blocks      = ["0.0.0.0/0"]
#   }

#   ingress {
#     description      = "SSH"
#     from_port        = 22
#     to_port          = 22
#     protocol         = "tcp"
#     cidr_blocks      = ["0.0.0.0/0"]
#   }

#   egress {
#     from_port        = 0
#     to_port          = 0
#     protocol         = "-1"
#     cidr_blocks      = ["0.0.0.0/0"]
#     ipv6_cidr_blocks = ["::/0"]
#   }

#   tags = {
#     Name = "allow_web"
#   }
# }


# # 7.create a network interface  with an ip in the subnet thaat was created in step 4
# resource "aws_network_interface" "web-server-nic1" {
#   subnet_id       = aws_subnet.subnet-test1.id
#   private_ips     = ["10.0.1.50"]
#   security_groups = [aws_security_group.allow_web.id]


#   }

# #8.assign an elastic IP to the network interface created in the step 7

# resource "aws_eip" "one" {
#   vpc                       = true
#   network_interface         = aws_network_interface.webserver-nic1.id
#   associate_with_private_ip = "10.0.1.50"
#   depends_on                = [aws_internet_gateway.gw]
# }
# #9.create ubuntu server and install enble apache2
# resource "aws_instance" "web-server-instance" {
#   ami           = "ami-052efd3df9dad4825"
#   instance_type = "t2.micro"
#   availability_zone = "us-east-1a"
#   key_name = terra-key_name

#   network_interface {
#     device_index = 0
#     network_interface_id = aws_network_interface.webserver-nic1.id
#   }

#   user_data = <<-EOF
#   #/bin/bash
#               sudo apt update -y
#               sudo apt install apache2
#               sudo systemctl start apache2
#               sudo bash -c 'echo your very first web server > /var/www/html/index.html'
#               EOF
  
